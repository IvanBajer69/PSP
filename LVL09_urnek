// Да се креира класа Recenica која е составена од низа од зборови (динамички алоцирана), и бројот на
// зборовите. Да се обезбедат следниве конструктори и методи за класата:
// • Конструктор со default параметри кој како аргументи добива низа од зборови и должина на
// низата, но ако се повика без аргименти прави низа од еден збор со содржина “default”
// • Деструктор кој соодветно ќе ја избрише динамички алоцираната меморија.
// Дополнително да се преоптоварат и следниве оператори за работа со низите:
// • Операторот << за печатење на сите зборови во реченицата.
// • Операторот = за доделување.
// • Операторот > кој споредува две решеници и враќа true ако левиот објект има повеќе зборови
// од десниот објект во однос на операторот.
// • Операторот -= (string zbor) кој го додава зборот zbor на почеток на низата.
// • Операторот ++ кој го отстранува последниот збор од низата а е реализиран како постфикс.
// • Операторот [] кој го враќа зборот кој се наоѓа во реченицата на соодветната позиција и
// дозволува истиот да биде променет.
// Напомена: Класата треба да се грижи за мемориско оптимизирање на низата (преку грижа за
// динамичката алокација при секоја операција)!

#include<iostream>
#include<string.h>
using namespace std;
class Recenica
{
    private:
    int counter;
    string *lista;
    public:
    Recenica(int c ,string *l)
    {
        if(c>=1)
        {
            counter=c;
        }
        else
        {
            counter=1;
            l[0]="default";
        }
        lista=new string[counter];
        for(int i=0;i<counter;i++)
        {
            lista[i]=l[i];
        }
    }
    Recenica()
    {
        counter=1;
        lista=new string[counter];
        lista[0]="default";
    }
    ~Recenica()
    {
        delete []lista;
        lista=nullptr;
    }
    Recenica &operator=(const Recenica &r)
    {
        counter=r.counter;
        lista=new string[counter];
        for(int i=0;i<counter;i++)
        {
            lista[i]=r.lista[i];
        }
        return *this;
    }
   friend bool operator>(const Recenica &r,const Recenica r2)
    {
           if(r.counter>r2.counter)
           {
               return true;
           }
        else
        {
            return false;
        }
     }
    Recenica &operator-=(string zbor)
    {
        string *pom=new string[counter+1];
        for(int i=counter;i>0;i--)
        {
            pom[i]=lista[i-1];
        }
        pom[0]=zbor;
        delete []lista;
        lista=pom;
        return *this;
    }
    Recenica &operator++()
    {
        string *pom=new string[counter-1];
        for(int i=0;i<counter;i++)
        {
            pom[i]=lista[i];
        }
        for(int i=0;i<counter-1;i++)
        {
            pom[i+1]=lista[i];
        }
        delete[]lista;
        pom[counter-1];
        lista=pom;
    }
   string &operator[](int poz)
    {
        for(int i=0;i<counter;i++)
        {
            if(i==poz)
            {
                return lista[i];
            }
        }
    }
    friend ostream &operator<<(ostream &COUT,Recenica &r)
    {
        for(int i=0;i<r.counter;i++)
        {
            cout<<r.lista[i]<<" ";
        }
        return COUT;
    }
    
};
int main()
{
string zborovi[6]={"sakam","da","polozam","psp","vo","juni"};
//Recenica r1=Recenica();
Recenica r2=Recenica(6,zborovi);
Recenica r3;
 r3=r2;
 cout<<r2<<endl;
 cout<<r3<<endl;
 r2-="Jas";
 cout<<r2<<endl;
//  -=r2;
//  cout<<r2;
//  cout<<r2;
// // r1[0]="Nov";
//  cout<<r2[0];
return 0;
}
